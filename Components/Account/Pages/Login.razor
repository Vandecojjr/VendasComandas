@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Comandas.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
@*             <MudGrid Justify="Justify.Center">
                <MudItem>
                    <StatusMessage Message="@errorMessage" />
                </MudItem>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <MudItem>
                <DataAnnotationsValidator />
                    <h2>lOGIN</h2>
                    <hr />
                 </MudItem>
                <ValidationSummary/>
                <MudItem >
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <MudTextField @bind-Value="Input.Email" Label="Email" Variant="Variant.Outlined">Entre com seu Email</MudTextField>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                 </MudItem>
                <MudItem >
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                <MudTextField @bind-Value="Input.Password" Label="Senha" Variant="Variant.Outlined">Entre com sua Senha</MudTextField>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </MudItem>
                <MudItem >
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        <MudCheckBox @bind-Value="Input.RememberMe" Label="Lembre me" Color="Color.Primary"></MudCheckBox>
                 </MudItem>
                <MudItem>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary">Login</MudButton>
                </MudItem>
                <div class="p-2">
                    <p>
                        <a href="Account/ForgotPassword">Esqueci minha senha</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Reenviar email de confirmação</a>
                    </p>z
                </div>
            </EditForm>
    </MudGrid> *@

@* <EditForm Model="Input" method="post" OnValidSubmit="LoginUser">
    <DataAnnotationsValidator />
        <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
            <MudCardContent>
                <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="Input.Email" For="@(() => Input.Email)" />
                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="Input.Password" For="@(() => Input.Password)" InputType="InputType.Password" />
                <MudCheckBox @bind-Value="Input.RememberMe" Label="Lembre me" Color="Color.Primary"></MudCheckBox>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
            </MudCardActions>
            </MudCard>
        </MudItem>
     </MudGrid>
     </EditForm> *@
<MudContainer>
    <div style="height:300px;"></div>

<MudGrid Justify="Justify.Center">
        <MudPaper Width="350px" Height="400px" Elevation="3">
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <MudItem xs="12">
                <MudPaper Elevation="0" Class="mb-6 mt-7 mx-6">
                <h2>Log in.</h2>
                <hr />
                </MudPaper>
                </MudItem >
                    <label for="email" class="ps-6">Email</label>
                <MudItem xs="11">
                    <MudPaper Height="30px" Class="mb-3 ms-6 pt-2 ps-3">
                        <InputText @bind-Value="Input.Email" style="outline: none; width: 200px;" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    </MudPaper>
                </MudItem>
                    <label for="password" class="ps-6">Senha</label>
                <MudItem xs="11">
                    <MudPaper Height="30px" Class="mb-3 ms-6 pt-2 ps-3">
                        <InputText type="password" @bind-Value="Input.Password" style="outline: none; width: 200px;" autocomplete="current-password" aria-required="true" placeholder="Senha" />
                </MudPaper>
            </MudItem>
                    @* <MudItem>
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="ms-6" />
                        Remember me
                    </label>
                    </MudItem> *@
                <MudItem xs="11">
                    <MudButton ButtonType="ButtonType.Submit"  Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="ms-4 my-3">LOG IN</MudButton>
                </MudItem>
                @* <MudLink Href="Account/ForgotPassword" Class="ms-16">Esqueci minha senha.</MudLink> *@
            </EditForm>
    </MudPaper>
</MudGrid>
</MudContainer>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
