@page "/categorias"
@using System.Globalization
@attribute [Authorize]
@inject ICategoriaServices CategoriaServices
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Categorias</PageTitle>

<ModalDeConfirmacao @ref="confirmacaoDeDelete"
                    Titulo="Confirmação de exclusão."
                    onCancela="()=> CancelaModalDeDelete()"
                    onConfirma="() => DeletarCategoria(removerCategoria)">
    <h5>Deseja deletar a categoria <span class="text-danger">@nomeDaCategoria</span>?</h5>
</ModalDeConfirmacao>

<MudButton Href="novaCategoria"
           Variant="Variant.Text"
           EndIcon="@Icons.Material.Filled.Add"
           Color="Color.Success">
    Nova Categoria
</MudButton>

<MudDataGrid T="Categoria" Filterable="true" Hideable="true" Items="@categorias" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Categorias</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Nome" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.Descricao" Sortable="false" Filterable="false" />
        <TemplateColumn Filterable="false" Sortable="false" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => NavigationManager.NavigateTo($"/novaCategoria{context.Item.CategoriaId}"))" />
                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => AbrirModalDeExclusao(context.Item.CategoriaId, context.Item.Nome))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code {

    private List<Categoria> categorias = new List<Categoria>();
    private string _searchString;

    ModalDeConfirmacao confirmacaoDeDelete;
    private Guid removerCategoria { get; set; }
    private string nomeDaCategoria { get; set; }

    protected override async Task OnInitializedAsync() => categorias = await CategoriaServices.GetAllCategoriasAsync();

    void AbrirModalDeExclusao(Guid id, string nome)
    {
        confirmacaoDeDelete.Exibir();
        removerCategoria = id;
        nomeDaCategoria = nome;
    }

    void CancelaModalDeDelete() => confirmacaoDeDelete.Ocultar();

    async Task DeletarCategoria(Guid CategoriaId)
    {
        await CategoriaServices.DeleteCategoriaAsync((Guid)CategoriaId);
        categorias = await CategoriaServices.GetAllCategoriasAsync();
        StateHasChanged();
        confirmacaoDeDelete.Ocultar();
    }

    private Func<Categoria, bool> _quickFilter => x =>
      {
      if (string.IsNullOrWhiteSpace(_searchString))
          return true;

      if (x.Nome.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
          return true;

      return false;
      };
}
