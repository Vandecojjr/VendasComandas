@rendermode InteractiveServer

@inject IToastService toastService
@inject IProdutoServices ProdutoServices
@inject IVendaServices VendaServices
@inject IMetodoDePagamentoServices MetodoDePagamentoServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


@using Blazored.Toast.Configuration
@using Blazored.Typeahead

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="5"
                IconType="IconType.Material"
                InfoIcon="school"
                WarningIcon="warning" />


@* Modal para a confirmação de exlusção do item lancado. *@

<ModalDeConfirmacao @ref="modalConfirma" onCancela="() => modalConfirma.Ocultar()" onConfirma="() => RemoverItemDaListaDeVendas(idDoItemAserDeletado)">
    <h6>Deseja deletar este item?</h6>
</ModalDeConfirmacao>

@* --------------------------------------------- *@

@if (metodosDePagamento.Count == 0)
{
    <ModalDeBloqueio Titulo="Cadastre um Metodo de pagamento"
                     onCancela="@(()=> NavigationManager.NavigateTo("/produtos"))"
                     onConfirma="@(()=> NavigationManager.NavigateTo("/configuracoes"))">
        Por favor cadastre Pelomenos um metodo de pagamento
    </ModalDeBloqueio>
}


@* Modal para o fechamento de venda. *@

@if (abrirModalVenda)
{
    <div class="modal-backdrop show"></div>
    <div class="modal" tabindex="-1" role="dialog"
         arial-hidden="true" style="display:block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title">Fhechamento de venda</h6>
                </div>
                <div class="modal-body">
                    <div>
                    <MudSwitch Label="Dividir conta" @bind-Value="dividirConta" Color="Color.Primary" Class="mr-n2 mb-6"/>
                    </div>
                    @if (dividirConta)
                    {
                        <MudPaper Elevation="0" Class="d-flex px-10">
                            <InputNumber class="form-control w-25" @bind-Value="quantidadeDePessoas"></InputNumber>
                            <label class="ms-6 mt-3"><h5>
                                    @if (quantidadeDePessoas > 0)
                                    {
                                        @((total / quantidadeDePessoas).ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")))
                                    }</h5></label>
                        </MudPaper>
                    }
                    <MudDivider/>
                    <MudPaper Elevation="0" Class="m-3">
                        @foreach (var item in formasDePagamento)
                        {
                            <label for="metodoDePagamento"><h6>Forma de pagamento</h6></label>
                            <InputSelect id="metodoDePagamento" class="form-control" @bind-Value="item.MetodoDePagamentoId">
                                @foreach (var metodo in metodosDePagamento)
                                {
                                    <option value="@metodo.Id">@metodo.Nome</option>
                                }
                            </InputSelect>
                            <label for="valor"><h6>Valor</h6></label>
                            <InputNumber @onblur="AtualizaFaltaPagar" @onkeydown="@(e => CompletaValorDoInput(item, e))" id="valor" class="form-control mb-2" @bind-Value="item.Valor"></InputNumber>
                            
                            <MudButton OnClick="() => RemoveFormaDePagamento(item)" Class="mx-3" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudButton>
                        }
                    </MudPaper>
                    <MudPaper Elevation="0" Class="d-flex">
                        <MudButton OnClick="() => AdicionarFormaDePagamento()" Class="mx-2" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success">Forma de pagamento</MudButton>
                        <MudSwitch Label="Alterar Desconto" @bind-Value="alterarDesconto" Color="Color.Primary" Class="mr-n2 ms-10" />
                    </MudPaper>

                    @if (alterarDesconto)
                    { 
                         <MudPaper Elevation="0" Class="d-flex justify-content-end mx-7 mb-2">
                            <label class="pt-3">R$</label>
                            <MudSwitch Label="%" @bind-Value="modoPorcent" Color="Color.Primary" Class="ms-4" />
                            <InputNumber @oninput="AlterarDescontoInput" class="form-control w-25" @bind-Value="descontoAlterado"></InputNumber>
                        </MudPaper>
                    }

                    <MudPaper Class="d-flex px-3 pt-2 mb-1" Style="background:#B3E5FC;">
                        <h5>Desconto</h5>
                        <MudSpacer />
                        <h4 aria-hidden="true" class="text-info">@descontoTotal.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h4>
                    </MudPaper>
                    @if (faltaPagar < 0 )
                    {
                        <MudPaper Class="d-flex px-3 pt-2" Style="background:#CFD8DC;">
                            <h3>Troco</h3>
                            <MudSpacer />
                            <h2 aria-hidden="true" class="text-dark">@faltaPagar.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h2>
                        </MudPaper>
                    }
                    else
                    {
                        <MudPaper Class="d-flex px-3 pt-2" Style="background:#C5E1A5;">
                            <h3>Total</h3>
                            <MudSpacer/>
                            <h2 aria-hidden="true" class="text-success">@faltaPagar.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h2>
                        </MudPaper>
                    }
                </div>
                <div class="modal-footer">
                    <MudButton OnClick="() => ConfirmarVenda()" Class="mx-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AttachMoney" Color="Color.Success">Confirmar</MudButton>
                    <MudButton OnClick="() => FecharModalDeVenda()" Variant="Variant.Filled">Cancelar</MudButton>
                </div>
            </div>
        </div>
    </div>
}

@* --------------------------------------------- *@

<MudPaper Class="p-3">
    <MudGrid>
        <MudItem sm="6" xs="12">
            <h5>Produto</h5>
            <BlazoredTypeahead SearchMethod="buscar" @bind-Value="produtoSelecionado">
                <SelectedTemplate>
                    Cod @context.Codigo ------- @context.Nome  ---- @context.Valor?.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))--------------- Qtd.(@context.Quantidade)
                </SelectedTemplate>
                <ResultTemplate>
                    Cod @context.Codigo ------- <h5>@context.Nome  @context.Valor?.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h5> --------------- Qtd.(@context.Quantidade)
                </ResultTemplate>
            </BlazoredTypeahead>
        </MudItem>
        <MudItem sm="2" xs="6">
            <h5>Quantidade</h5>
            <InputNumber class="form-control" @bind-Value="quantidade"></InputNumber>
        </MudItem>
        <MudItem sm="2" xs="6">
            <h5>Desconto (@(modoPorcent ? "%" : "R$"))</h5>
            <InputNumber class="form-control" @bind-Value="desconto"></InputNumber>
        </MudItem >
        <MudItem sm="1">
            <h5>Modo de desconto</h5>
            <MudSwitch Class="ms-10" @bind-Value="modoPorcent" Label="%" Color="Color.Success" />
        </MudItem>
        <MudItem>
            <MudButton OnClick="() => LancarProduto(produtoSelecionado, quantidade, desconto)" Class="mt-6 ms-6" Color="Color.Success">Lançar</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>



@if (produtosLancados.Count != 0)
{
    <MudGrid Class="pt-4" Spacing="1">
        <MudItem xs=12 sm=6>
            <MudPaper Style="background:#C5E1A5;" Class="d-flex align-center justify-center mud-width-full py-3">
                <h2 class="pe-5 text-success">Sub-Total</h2>
                <h1 class="text-success">@total.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h1>
            </MudPaper>
        </MudItem>
        <MudItem xs=12 sm=6>
            <MudPaper Style="background:#B3E5FC;" Class="d-flex align-center justify-center mud-width-full py-3">
                <h2 style="color:#01579B;" class="pe-5">Descontos</h2>
                <h1 style="color:#01579B;">@descontoTotal.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h1>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center justify-center mud-width-full ">
                <MudButton OnClick="() => AbrirModalDeVenda()" FullWidth Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Sell" Size="Size.Large" Color="Color.Success"><h4>Vender</h4></MudButton>
             </MudPaper>
         </MudItem>
         @foreach (var item in produtosLancados)
        {
            <MudPaper Height="70px" Class="d-flex align-center justify-center mud-width-full my-2 px-1">
                <MudItem Class="py-0" xs="9">
                    <h5>@item.Quantidade x @item.Nome</h5>
                </MudItem>
                <MudItem >
                    @if (item.Desconto == null || item.Desconto == 0)
                    {
                        <h4 class="text-success">@((produtos.FirstOrDefault(x => x.Id == item.IdDoProduto)?.Valor * item.Quantidade)?.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")))</h4>
                    }
                    else
                    {
                        <h4 class="text-success">@(((produtos.FirstOrDefault(x => x.Id == item.IdDoProduto)?.Valor * item.Quantidade) - item.Desconto)?.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")))</h4>
                        <h8 class="text-success"><s>@((produtos.FirstOrDefault(x => x.Id == item.IdDoProduto)?.Valor * item.Quantidade)?.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")))</s></h8>
                        <h8 class="text-danger"> -@item.Desconto?.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h8>
                    }
                </MudItem>
                <MudItem Class="ps-4">
                    <MudIconButton OnClick="() => ConfirmarExclusaoDoItem(item.IdDoProduto)" Size="Size.Medium" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                </MudItem>
            </MudPaper>
        }
    </MudGrid>
}


@code {
    private Produto produtoSelecionado;
    private FormaDePagamento formaDePagamento = new();
    private int quantidade { get; set; }
    private decimal desconto { get; set; }
    private decimal descontoTotal { get; set; }
    private decimal  descontoAlterado { get; set; }
    private bool modoPorcent = false;
    private decimal total { get; set; }
    private decimal faltaPagar { get; set; }
    private Guid idDoItemAserDeletado { get; set; }
    private bool abrirModalVenda = false;
    private bool dividirConta = false;
    private bool alterarDesconto = false;
    private int quantidadeDePessoas = 1;
    ModalDeConfirmacao modalConfirma = new();

    private List<Produto> produtos = new List<Produto>();
    private List<ProdutoVendido> produtosLancados = new List<ProdutoVendido>();
    private List<MetodoDePagamento> metodosDePagamento = new List<MetodoDePagamento>();
    private List<FormaDePagamento> formasDePagamento = new List<FormaDePagamento>();


    protected override async Task OnInitializedAsync() 
    { 
        produtos = await ProdutoServices.GetAllProdutosAsync();
        metodosDePagamento = await MetodoDePagamentoServices.GetAllMetodosAsync();
        formasDePagamento.Add(formaDePagamento);
    }

    //fuções do modal de fhechamento de venda.

    public void FecharModalDeVenda() => abrirModalVenda = false;
    public void AbrirModalDeVenda() 
    {
        faltaPagar = total;
        abrirModalVenda = true;
    }

    public async void ConfirmarVenda()
    {
        if (faltaPagar > 0)
        {
            toastService.ShowError($"Ainda faltam R${faltaPagar} do valor TOTAL para concluir.");
        }
        else
        {
            List<ProdutoVendido> listaDeProdutos = new List<ProdutoVendido>(produtosLancados);
            List<FormaDePagamento> listaDeFormasDePagamentos = new List<FormaDePagamento>(formasDePagamento);
            Venda vendaModal = new();
            vendaModal.Total = total;
            vendaModal.Descontos = descontoTotal;
            produtosLancados.Clear();
            formasDePagamento.Clear();
            total = 0;
            descontoTotal = 0;
            abrirModalVenda = false;
            toastService.ShowSuccess("Venda realizada com SUCESSO!");
            await VendaServices.AddVendaAsync(vendaModal, listaDeProdutos, listaDeFormasDePagamentos);
        }
    }

    //---------------------------------------
    private async Task<IEnumerable<Produto>> buscar(string value)
    {
        return await Task.FromResult(produtos.Where(x => x.IsActive && (x.Nome.ToLower().Contains(value.ToLower()) || x.Codigo.ToString().ToLower().Contains(value))).ToList());
    }

    public void ConfirmarExclusaoDoItem(Guid id)
    {
        modalConfirma.Exibir();
        idDoItemAserDeletado = id;
    }

    public void LimparInputs()
    {
        quantidade = 0;
        desconto = 0;
        produtoSelecionado = null;
    }

    public void RemoverItemDaListaDeVendas(Guid id)
    {
        var produtoExiste = produtosLancados.FirstOrDefault(x => x.IdDoProduto == id);
        produtosLancados.Remove(produtoExiste);
        modalConfirma.Ocultar();
    }

    public void LancarProduto(Produto produto, int quantidade, decimal desc)
    {
        if ((int)quantidade <= 0)
        {
            toastService.ShowError("A quantidade do produto deve ser maior que zero!");
        }
        else
        {
            var produtoExiste = produtosLancados.FirstOrDefault(x => x.IdDoProduto == produto.Id);

            if (modoPorcent)
            {
                desc = desc / 100 * ((decimal)produto.Valor * quantidade);
            }

            total += ((decimal)produto.Valor * quantidade) - desc;
            descontoTotal += desc;

            if (produtoExiste != null ) 
            {
                produtoExiste.Quantidade += quantidade;
                produtoExiste.Desconto += desc;
            }
            else
            {
                ProdutoVendido produtoAtualizado = new ProdutoVendido();
                produtoAtualizado.IdDoProduto = produto.Id;
                produtoAtualizado.Nome = produto.Nome;
                produtoAtualizado.Quantidade = (int)quantidade;
                produtoAtualizado.Desconto = desc;
                produtosLancados.Add(produtoAtualizado);
            }
            LimparInputs();
        }

    }

    public void AtualizaFaltaPagar()
    {
        faltaPagar = total - descontoTotal;
        decimal novoTotal = 0;
        foreach (var item in formasDePagamento)
        {
            novoTotal += item.Valor;
        }
        faltaPagar -= novoTotal;
    }

    public void AdicionarFormaDePagamento()
    {
        formasDePagamento.Add(new FormaDePagamento());
    }

    public void RemoveFormaDePagamento(FormaDePagamento forma)
    {
        formasDePagamento.Remove(forma);
        AtualizaFaltaPagar();
    }

    private void AlterarDescontoInput(ChangeEventArgs args)
    {
        string valorString = args.Value.ToString();
        if (modoPorcent)
        {
            if (int.TryParse(valorString, out int valorinteiro))
            {
                decimal descontoPercentual = (decimal)valorinteiro / 100;
                descontoTotal = descontoPercentual * total;
            }
            else descontoTotal = 0;
        }
        else
        {
            if (decimal.TryParse(valorString, out decimal valorDecimal))
            {
                descontoTotal = valorDecimal;
            }
            else descontoTotal = 0;
        }
        AtualizaFaltaPagar();
    }

    private void CompletaValorDoInput(FormaDePagamento forma ,KeyboardEventArgs args)
    {
        if (args.Key == " ")
        {
            forma.Valor = faltaPagar;
        }
    }

}