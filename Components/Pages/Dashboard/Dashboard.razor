@page "/dashboard"
@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize(Roles = "EasyAdmin, Admin, dashboard")]
@inject IProdutoServices ProdutoServices
@inject IVendaServices VendasServices
@inject IProdutoVendidoServices ProdutosVendidosServices

@inject IUsuarioServices UsuarioServices
@inject NavigationManager NavigationManager

@if (!carregando)
{
<MudContainer Class=" px-2" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudPaper Elevation="2" Class="pa-4 d-flex">
                <MudDatePicker Class="mx-2" PickerVariant="PickerVariant.Dialog" Color="Color.Tertiary" Label="Data Inicial" @bind-Date="dataInicial" />
                <MudDatePicker Class="mx-2" PickerVariant="PickerVariant.Dialog" Color="Color.Tertiary" Label="Data Final" @bind-Date="dataFinal" />
                <MudButton OnClick="FiltrarVendas">APLICAR</MudButton>
            </MudPaper>
        </MudItem>
  
        <MudItem xs="12" sm="6" md="3">
                <MudPaper Elevation="2" Class="pa-4" Style="background:#1C7293;">
                <H6 class="d-flex justify-content-center text-light">Total de vendas</H6>
                <MudDivider/>
                    <h1 class="d-flex justify-content-center text-light">@(string.Format("{0:C}", totalDeVendas))</h1>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="3">
                <MudPaper Elevation="2" Class="pa-4" Style="background:#1C7293;">
                <H6 class="d-flex justify-content-center text-light">Total de Lucro</H6>
                <MudDivider/>
                    <h1 class="d-flex justify-content-center text-light">@(string.Format("{0:C}", totalDeLucro))</h1>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
                <MudPaper Elevation="2" Class="pa-4" Style="background:#1C7293;">
                <H6 class="d-flex justify-content-center text-light">Valor total de produtos em estoque</H6>
                <MudDivider/>
                    <h1 class="d-flex justify-content-center text-light">@(string.Format("{0:C}", totalDeProdutosEmEstoque))</h1>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="3">
                <MudPaper Elevation="2" Class="pa-4" Style="background:#1C7293;">
                <H6 class="d-flex justify-content-center text-light">Valor de custos dos produtos em estoque</H6>
                <MudDivider/>
                    <h1 class="d-flex justify-content-center text-light">@(string.Format("{0:C}", totalDeProdutosEmEstoqueCusto))</h1>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="2" Class="pa-4">
                <h5>Top 5 produtos mais vendidos</h5>
                <MudChart ChartType="ChartType.Pie" InputData="@produtosMaisVendidos" @bind-SelectedIndex="Index" InputLabels="@produtosMaisVendidosNomes" Width="300px" Height="330px" />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="2" Class="pa-4">
                <h5>Vendas no periodo de 1 Ano</h5>
                <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" ChartOptions="@Options" Height="330px" />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="2" Class="pa-4" Style="background:#1C7293;">
                <H6 class="d-flex justify-content-center text-light">Total de produtos em estoque</H6>
                <MudDivider/>
                    <h1 class="d-flex justify-content-center text-light">@totalProdutoEmEstoque</h1>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="2" Class="pa-4" Style="background:#1C7293;">
                <H6 class="d-flex justify-content-center text-light">Ticket médio</H6>
                <MudDivider/>
                    <h1 class="d-flex justify-content-center text-light">@(string.Format("{0:C}", ticketMedio))</h1>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="2" Class="pa-4" Style="background:#1C7293;">
                <H6 class="d-flex justify-content-center text-light">Total de perdas</H6>
                <MudDivider/>
                    <h1 class="d-flex justify-content-center text-light">@(string.Format("{0:C}", perdaTotal))</h1>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
}
else
{
    <MudProgressLinear Color="Color.Info" Indeterminate="true"/>
}

@code {
    private bool carregando = true;
    List<Produto> produtos = new List<Produto>();
    List<Venda> vendas = new List<Venda>();
    List<ProdutoVendido> produtosVendidos = new List<ProdutoVendido>();
    List<decimal> vendasChar = new List<decimal>();
    List<ProdutoVendido> produtosDoMes = new List<ProdutoVendido>();


    List<ProdutoMaisVendido> produtosVendido2 = new List<ProdutoMaisVendido>();

    List<double> quantidades = new List<double>();
    List<string> nomes = new List<string>();

    double[] produtosMaisVendidos { get; set; }
    string[] produtosMaisVendidosNomes { get; set; }

    public List<ChartSeries> Series = new List<ChartSeries>();

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public string[] XAxisLabels = { "Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez" };
    public ChartOptions Options = new ChartOptions();


    public decimal? totalDeProdutosEmEstoque = 0;
    public decimal? totalDeProdutosEmEstoqueCusto = 0;
    public decimal? totalDeVendas = 0;
    public decimal? totalDeLucro = 0;
    public decimal? ticketMedio = 0;
    public decimal? perdaTotal = 0;
    public int? totalProdutoEmEstoque = 0;


    public DateTime? dataInicial = DateTime.Today;
    public DateTime? dataFinal = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        bool usuarioAtivo = await UsuarioServices.GetUsuarioAtivo();
        if (!usuarioAtivo) NavigationManager.NavigateTo("/bloqueado");

        produtos = await ProdutoServices.GetAllProdutosAsync();
        vendasChar = await VendasServices.ObterVendasDosMeses();

        await FiltrarVendas();
        foreach (var item in produtos)
        {
            totalDeProdutosEmEstoque += item.Valor * item.Quantidade;
            totalDeProdutosEmEstoqueCusto += item.ValorDeCusto * item.Quantidade;
        }
        double[] vendasDouble = vendasChar.Select(x => Convert.ToDouble(x)).ToArray();

        // Inicialize a propriedade Series
        Series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Vendas", Data = vendasDouble },
        };

        await TotaldeProdutosEmEstoque();
        await TicketMedio();
        await CalcularPerdas();
        carregando = false;

    }

    public async Task FiltrarVendas()
    {
        vendas = await VendasServices.ObterVendasPorDataAsync(dataInicial, dataFinal);
        produtosDoMes.Clear();

        totalDeVendas = 0;
        totalDeLucro = 0;
        foreach (var venda in vendas)
        {
            List<ProdutoVendido> produtosvendidosPorvenda = new List<ProdutoVendido>();
            totalDeVendas += venda.Total;
            totalDeLucro += venda.Lucro;
            produtosvendidosPorvenda = await ProdutosVendidosServices.GetProdutosVendidosAsync(venda);

            foreach (var item in produtosvendidosPorvenda)
            {
                produtosDoMes.Add(item);
            }

        }
        produtosMaisVendidos = new double[produtosDoMes.Count];
        produtosMaisVendidosNomes = new string[produtosDoMes.Count];
        await ProdutosMaisVendidos();
        await ProdutosMaisVendidos2();
        await TicketMedio();
    }


    class ProdutoMaisVendido
    {
        public string nome { get; set; }
        public int? quantidade { get; set; }
    }

    public async Task ProdutosMaisVendidos()
    {
        produtosVendido2.Clear();
        foreach (var item in produtosDoMes)
        {
            ProdutoMaisVendido produtoVendido = new();
            produtoVendido.nome = item.Nome;
            produtoVendido.quantidade = item.Quantidade;

            foreach (var x in produtosDoMes)
            {
                if (produtoVendido.nome != null)
                {
                    if (x.Nome == produtoVendido.nome)
                    {
                        produtoVendido.quantidade += x.Quantidade;
                    }

                }
            }
            if (!produtosVendido2.Any(x => x.nome == produtoVendido.nome))
            {
                produtosVendido2.Add(produtoVendido);
            }
            produtoVendido = new();
        } 
    }

    public async Task ProdutosMaisVendidos2()
    {
        quantidades.Clear();
        nomes.Clear();
        ProdutoMaisVendido produtoVendido = new();
        List<ProdutoMaisVendido> produtosVendido3 = new List<ProdutoMaisVendido>();

        while (produtosVendido2.Count > 0)
        {
            if (produtosVendido3.Count == 5) break;
            produtoVendido = produtosVendido2[0];
            foreach (var item in produtosVendido2)
            {
                if (item.quantidade > produtoVendido.quantidade)
                {
                    produtoVendido = item;
                }
            }
            produtosVendido3.Add(produtoVendido);
            produtosVendido2.Remove(produtoVendido);
        }

        foreach (var x in produtosVendido3)
        {
            if (x.quantidade != null)
            {
                quantidades.Add((double)x.quantidade);
                nomes.Add(x.nome);
            }

        }
        produtosMaisVendidos = quantidades.ToArray();
        produtosMaisVendidosNomes = nomes.ToArray();
        StateHasChanged();
    }

    public async Task TotaldeProdutosEmEstoque()
    {
        List<Produto> prodCalculo = new List<Produto>();
        prodCalculo = await ProdutoServices.GetAllProdutosAsync();
        foreach (var item in prodCalculo)
        {
            if (item.Quantidade != null) totalProdutoEmEstoque += item.Quantidade;

        }
    }
    public async Task TicketMedio()
    {
        decimal total = 0;
        int totalDevendas = 0;
        foreach (var item in vendas)
        {
            total += item.Total;
            totalDevendas += 1; 
        }
        if (totalDevendas > 0)
        {
            ticketMedio = total / totalDevendas;
        }
        else
        {
            ticketMedio = 0;
        }
        
    }
    public async Task CalcularPerdas()
    {
        List<LogPrecoProduto> logs = new List<LogPrecoProduto>();
        logs = await ProdutoServices.GetAllLogsPorPeriodo(dataInicial , dataFinal);
        foreach (var item in logs)
        {
            Produto produtoTeste = produtos.FirstOrDefault(x => x.Id == item.IdProduto);
            if (item.Tag == "perda") perdaTotal += produtoTeste.ValorDeCusto * item.Quantidade;
        }
    }

}
